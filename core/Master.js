/* *  Arctic-snowstorm *  (c) 2014-2015, Teempla Inc. * *  MIT License */"use strict";define([    'class',    'q',    'config',    'log',    'gracefulDomain',    'queueBroker',    'connectorsManager',    'log4js'] ,function (Class, Q, config, log, GracefulDomain, QueueBroker, ConnectorsManager, log4js) {    /**     * Master process controller.     *     * @class Master     * @name Master     * @static     * @public     */    return Class.extend({ /** THIS CLASS HAS ONLY STATIC METHODS **/ }, {        /**         * Queue broker instance         *         * @property {QueueBroker}         * @private         */        queueBroker: null,        /**         * Connectors manager instance         *         * @property {ConnectorsManager} connectorsManager         * @private         */        connectorsManager: null,        /**         * Run master application         *         * @public         */        start: function(){            var self = this;            // Create grace instance            var grace = new GracefulDomain();            // Subscript for domain events            this.listenTo(grace, 'start',    this.onStart);            this.listenTo(grace, 'error',    this.onError);            this.listenTo(grace, 'shutdown', this.onShutDown);            this.listenTo(grace, 'exit',     this.onExit);            this.listenTo(grace, 'forcedShutdown',  this.onForcedShutdown);            // Emergency sync exit            grace.onEmergencySyncExit(function(){                self.onEmergencyExit();            });            // Start app            grace.start();        },        /** ************************************************************************         *         * Master events handlers         *         * ************************************************************************/        /**         * Start event.         * On this event we check all connection and start QueueBroker         *         * @event         * @private         */        onStart: function(){            var self = this;            log.info("Start application");            var queueProvider = config.get('application:queueConnector');            var listOfConnectorsNames = config.get('application:connectors');            var listOfModulesNames = config.get('application:modules');            // Init queue broker and connectors manager            this.queueBroker = new QueueBroker(queueProvider, listOfModulesNames);            this.connectorsManager = new ConnectorsManager(listOfConnectorsNames);            // First connect to dbs, ensure connection            this.connectorsManager.connect()                .then(function(){                    // Start listen queue and subscribe workers                    return self.queueBroker.start();                })                .done();        },        /**         * Application graceful close         *         * @param {Function} cb callback         * @event         * @private         */        onShutDown: function(cb){            var self = this;            log.info("Graceful shutting down");            // Stop listen queue            self.queueBroker.stop()                .then(function(){                    // Disconnect all connectors                    return self.connectorsManager.disconnect()                })                .then(function(){                    // Flush log to disk                    log4js.shutdown(function(){ cb(); });                })                .done();        },        /**         * Application handle exception and will shutdown         *         * @param {String|Error} error         * @param {GracefulDomain} grace         *         * @event         * @private         */        onError: function(error, grace){            log.error('Shutdown on error:', error);            // Shutdown with code 1            grace.shutdown(1);        },        /**         * Application closed         *         * @param {Number} code         *         * @event         * @private         */        onExit: function(code){            log.warn("Application exit with code: " + code);        },        /**         * Emergency exit, use only sync code !!!         *         * @event         * @sync         * @private         */        onEmergencyExit: function(){            if(this.connectorsManager){                this.connectorsManager.syncDisconnect()            }        },        /**         * Exit on shutdown timeout         *         * @param {Number} code         *         * @event         * @private         */        onForcedShutdown: function(code){            log.error ("Timed out, forcing master shutdown, with code:", code);        }    });});